import logging
import os
import sys

from IPython.display import display, Markdown
import streamlit as st
from openai import OpenAI

import agentops
from agentops.agent import track_agent


if 'OPENAI_API_KEY' not in os.environ:
  sys.stderr.write("""
  You haven't set up your API key yet.

  If you don't have an API key yet, visit:

  https://platform.openai.com/signup

  1. Make an account or sign in
  2. Click "View API Keys" from the top right menu.
  3. Click "Create new secret key"

  Then, open the Secrets Tool and add OPENAI_API_KEY as a secret.
  """)
  exit(1)


logging.basicConfig(level=logging.DEBUG) # this will let us see that calls are assigned to an agent

agentops.init(os.environ['AGENTOPS_API_KEY'])
openai_client = OpenAI(api_key = os.environ['OPENAI_API_KEY'] )


st.set_page_config(page_title="AgentOps AI Copywriters",
                   page_icon="üìù",
                   layout="centered",
                   initial_sidebar_state="auto",
                   menu_items=None)

st.title("Give Us a Topic to Write About")


@track_agent(name='qa')
class QaAgent:
    def completion(self, prompt: str):
        res = openai_client.chat.completions.create(model='gpt-3.5-turbo', messages=[{"role": "system", "content": "You are a Quality Assurance AI. Your job is to review text generated by other AI agents and act as the final reviewer. You will be given a text generated by an AI agent and asked to review it. You will provide a score."},
    {"role": "user", "content": prompt}], temperature=0.25)
        return res.choices[0].message.content

@track_agent(name='junior_copywriter')
class JuniorCopywriter:
    def completion(self, prompt: str):
        res = openai_client.chat.completions.create(model='gpt-3.5-turbo', messages=[{"role": "system", "content": "You are a junior copywriter. Your job is to take a first pass at writing a piece of content. You will be given a topic and asked to write a piece of content that will be used in multiple mediums. Keep the content short and concise"},
    {"role": "user", "content": prompt}], temperature=0.6)
        return res.choices[0].message.content

@track_agent(name='class_clown')
class ClassClown:
    def completion(self, prompt: str):
        res = openai_client.chat.completions.create(model='gpt-3.5-turbo', messages=[{"role": "system", "content": "You are a retired stand-up comedian. You will be given a piece of content from a junior copywriter. Your job is to make the content more engaging. But also you need to make it hilarious."},
    {"role": "user", "content": prompt}], temperature=1)
        return res.choices[0].message.content

qa = QaAgent()
junior_copywriter = JuniorCopywriter()
class_clown = ClassClown()

# Take input from the user
user_input = st.text_input("Enter Your Query", "")

# Display the input
if st.button("Submit"):
  st.write(f"Your Query: {user_input}")

  with st.spinner("Thinking..."):
    # Call the Agents and Log Individual Responses
    junior_response = junior_copywriter.completion(user_input)
    funny_response = class_clown.completion(junior_response)
    # Display the analysys of the response
    st.write(f"Article: {str(funny_response)}")
    qaresult = qa.completion(funny_response)
    # Display the analysys of the response
    st.write(f"Analysis: {str(qaresult)}")
